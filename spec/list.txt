# Build a node using the syntactic sugar, tag=text.
BOTH single_node.xmq single_node.xml
# Whitespace is ignored.
RIGHT single_node_no_ws.xmq single_node.xml

# Build a node with children, tag{ ... }.
BOTH children.xmq children.xml
RIGHT children_no_ws.xmq children.xml

# Build a node with the syntactic sugar, tag='utf8'. Remember that leading/ending ws-nl-ws is always trimmed from quotes.
BOTH quoted_content.xmq quoted_content.xml
RIGHT quoted_content_newlines.xmq quoted_content.xml

# Without the syntactic sugar, the same node can be created with standalone quoted content added as text to the parent node.
RIGHT quoted_content_child.xmq quoted_content.xml

# Build a node with leading/ending whitespace not trimmed! Note! xmq by default strips leading/ending whitespace when moving from XML to XMQ. Add opion -p to preserve whitespace, like this: "xmq -p foo.xml > foo.xmq".
BOTH quoted_content_with_ws.xmq quoted_content_with_ws.xml -p

# Incidental whitespace is always removed.
BOTH node_with_text_block.xmq node_with_text_block.xml
RIGHT node_with_text_block_more.xmq node_with_text_block.xml

# To make indentation explicit, quote each line. An implicit newline is inserted between two standalone quoted contents.
RIGHT node_with_forced_indents.xmq node_with_forced_indents.xml

# Build a self closing node.
BOTH empty_node.xmq empty_node.xml

# Two single quotes are always the empty string.
RIGHT empty_node_explicit.xmq empty_node.xml

# Build an xml node with multple children. Observe that newlines and indentantion is always inserted between elements!
BOTH xmlnode_with_lines.xmq xmlnode_with_lines.xml -p

# Detect html output and this will prevent newline+indentation before and after html inline elements. Observe that no whitespace is inserted before &lt;traveller&gt; but is inserted after, accordin to the explicit whitespace in xmq.
BOTH node_with_lines.xmq node_with_lines.html -p

# Build an xml node with multple data lines. Note that xmq always joins standalone quotes without newlines to the nearest tags. Irrespective if it is xml or html.
BOTH node_with_data_lines.xmq node_with_data_lines.xml -p

# Build a node with attributes.
BOTH node_with_attr.xmq node_with_attr.xml

# Use triple quotes to quote content containing quotes! Remember that double quotes is the empty string.
BOTH node_click.xmq node_click.xml --html --html

# Use quadruple quotes to quote content containing triple quotes! I.e. use n+1 quotes to quote content with n quotes.
RIGHT quoting_quotes.xmq quoting_quotes.xml

# To quote strings that start or  end with quotes, add a newline that will be trimmed away.
RIGHT quote_leading_quote.xmq quote_leading_quote.xml

# To make an explicit leading newline use an empty string and multiple childs.
RIGHT leading_newline.xmq leading_newline.xml

# You can add newlines inside an attribute.
BOTH attr_with_newlines.xmq attr_with_newlines.xml

# XMQ attributes having no value are allowed and for xml translates into attr="attr"
BOTH xml_attr.xmq xml_attr.xml

# Translates into the same single attribute for html.
BOTH html_attr.xmq html_attr.html

# When generating html, do not self-close non-void tags.
BOTH html_voids.xmq html_voids.html

# Unnecessary extras are allowed.
RIGHT html_voids_extra.xmq html_voids.html

# Example feature.xml
BOTH feature.xmq feature.xml

# Example pom.xml
BOTH oom.xmq oom.xml
